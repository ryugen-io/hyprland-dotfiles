# Gemini CLI
source $HOME/.config/gemini.env

# -----------------------------------------------------
# General Aliases
# -----------------------------------------------------
alias nf='neofetch'
alias ff='fastfetch'

alias ls='eza --color=always --group-directories-first --icons'
alias ll='eza -l --color=always --group-directories-first --icons --git --time-style=long-iso'
alias la='eza -a --color=always --group-directories-first --icons'
alias l='eza -lah --color=always --group-directories-first --icons --git --time-style=long-iso'
alias lt='eza -aT --color=always --group-directories-first --icons'
alias l.='eza -a | grep -E "^\."'  # Show only dotfiles

# Navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Git shortcuts
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gcl='git clone'
alias gl='git log --oneline'
alias gd='git diff'
alias gpush='git push'
alias gpull='git pull'

alias q='exit'
alias h='history'
alias c='clear'
alias reload='source ~/.config/shell.env'

mkcd() {
    mkdir -p "$1" && cd "$1"
}

extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xvf "$1"     ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

alias wifi='nmtui'
alias install='yay -S'
alias update='yay -Syu'
alias search='yay -Ss'
alias lsearch='yay -Qs'
alias remove='yay -Rns'

# -----------------------------------------------------
# System Aliases
# -----------------------------------------------------
alias update-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'
alias backup='sudo timeshift --create --comments "archbtw-backup-$(date +%Y%m%d)"'
alias shutdown='systemctl poweroff'
alias du='dust'


# -----------------------------------------------------
# Environment Variables
# -----------------------------------------------------
export SHELL_CONFIG_DIR="$HOME/.config"

# Development paths
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

export CARGO_HOME="$HOME/.cargo"
export PATH="$CARGO_HOME/bin:$PATH"

# NVM - Lazy-loaded for faster shell startup
export NVM_DIR="$HOME/.nvm"

# Centralized list of commands to be lazy-loaded.
# Add any new node-related commands here.
_lazy_nvm_commands=("nvm" "node" "npm" "npx" "pnpm" "ng" "gemini")

# Generic lazy-loader function for nvm
lazy_load_nvm() {
  # Unset all the lazy-loading functions to avoid loops
  # and to ensure subsequent calls run the real commands.
  unset -f lazy_load_nvm
  for cmd in "${_lazy_nvm_commands[@]}"; do
    unset -f "$cmd" 2>/dev/null # Use 2>/dev/null to suppress errors if function doesn't exist
  done
  unset _lazy_nvm_commands

  # Load nvm and its bash completion
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  # Execute the originally intended command with all its arguments
  "$@"
}

# Dynamically create a lazy-loading function for each command in the list.
for cmd in "${_lazy_nvm_commands[@]}"; do
  # The eval creates a function like: node() { lazy_load_nvm "node" "$@"; }
  eval "$cmd() { lazy_load_nvm \"$cmd\" \"\$@\"; }"
done

# Clean up the temporary variable
unset cmd

# Android cmdline tools & Flutter SDK
export ANDROID_HOME="$HOME/Android"
export ANDROID_SDK_ROOT="$ANDROID_HOME/sdk"
export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
export PATH="$ANDROID_SDK_ROOT/platform-tools:$PATH"
export FLUTTER_HOME="$ANDROID_HOME/flutter"
export PATH="$FLUTTER_HOME/bin:$PATH"
export CHROME_EXECUTABLE="/usr/bin/google-chrome-stable"
